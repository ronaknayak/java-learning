package java_serialization;

import java.io.Serializable;

/**
 * serialVersionUID:
 * 
 * In Serialization both the sender and receiver need not to be same and need
 * not be from the same location and need not to use same machine. Persons may
 * be different, locations may be different and machines may be different.
 * 
 * At the time of Serialization JVM will save a unique id with every object.
 * This unique id will be generated by JVM based on .class file. At the time of
 * DeSerialization receiver side JVM will compare object unique id with local
 * .class unique id.
 * 
 * If both are matched then only DeSerialization will be performed otherwise
 * receiver unable to DeSerialize and we'll get RE: InvalidClassException.
 * 
 * This unique identifier is nothing but serialVersionUID.
 * 
 * 
 * The problems of depending on Default serialVersionUID generated by JVM:
 * 
 * 1) Both sender and receiver should use same JVM with respect to vendor and
 * version. If there is any Incompatibility in JVM versions, then receiver is
 * unable to DeSerialize because of different serialVersionUID's. In this case
 * we'll get RE: InvalidClassException.
 * 
 * 2) After Serialization if we change .class file at receiver side then we
 * can't perform DeSerialization because of miss match in serialVersionUID's of
 * local class of receiver and serialized object. In this case at the time of
 * DeSerialization we'll get RE: InvalidClassException.
 * 
 * 3) To generate serialVersionUID internally JVM will use complex algorithm
 * which may create performance problems.
 * 
 * We can solve this above problems by configuring our own serialVersionUID.
 */

// We can configure serialVersionUID as follows:

public class Serialization_7 implements Serializable {

	private static final long serialVersionUID = 1L;
}
