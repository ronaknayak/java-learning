package java_multi_thread;

/**
 * Best approach to define a Thread:
 * 
 * Among two ways of define a Thread implements Runnable approach is
 * recommended.
 * 
 * In the first approach, our class always extends Thread class, there is no
 * chance of extending any other class. Hence, we are missing inheritance
 * benefit.
 * 
 * But, In second approach while implementing Runnable interface we can extend
 * any other class. Hence, we won't missing inheritance benefit.
 * 
 * Because of above reason implementing Runnable interface approach is
 * recommended then extending Thread class.
 */

public class Thread_D {

	public static void main(String[] args) {

		/**
		 * Thread class constructors:
		 */
		Thread thread = new Thread();

		// To pass Runnable object
		TestRunnable runnable = new TestRunnable();
		Thread thread2 = new Thread(runnable);

		// To give Thread a name
		String threadName = "Thread Name";
		Thread thread3 = new Thread(threadName);

		Thread thread4 = new Thread(runnable, threadName);

		// To specify a thread group for a Thread
		ThreadGroup group = new ThreadGroup("Thread Group");
		Thread thread5 = new Thread(group, threadName);

		Thread thread6 = new Thread(group, runnable);

		Thread thread7 = new Thread(group, runnable, threadName);

		// To specify stack size for a Thread
		long stackSize = 1000;
		Thread thread8 = new Thread(group, runnable, threadName, stackSize);

		/**
		 * Another way to define Thread - Because TestThread extends Thread
		 * class and Thread class implements Runnable interface.
		 * 
		 * But, This is not recommended approach.
		 */
		TestThread testThread = new TestThread();
		Thread threadObj = new Thread(testThread);

		/**
		 * Getting and Setting name of a Thread:
		 * 
		 * Every Thread in Java has some name. It may be provided by the
		 * programmer or default name generated by JVM.
		 * 
		 * We can get current executing Thread reference by using
		 * currentThread() method of the Thread class.
		 */
		System.out.println("Default name of main thread:"
				+ Thread.currentThread().getName());

		testThread.start();
		try {
			Thread.sleep(1000);
			testThread.setName("Executing First");
			System.out.println("Custom name of child thread:" + testThread.getName());

		} catch (InterruptedException e) {
		}
	}
}

class TestRunnable implements Runnable {

	@Override
	public void run() {

	}
}

class TestThread extends Thread {

	@Override
	public void run() {
		super.run();
		System.out.println("Default name of child thread:"
				+ Thread.currentThread().getName());
	}
}